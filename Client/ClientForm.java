
import java.awt.event.KeyEvent;
import java.io.*;


/**
 *
 * @author PK
 */
public class ClientForm extends javax.swing.JFrame {
    
    protected String username = "anonymous";
    protected String status = ">"; //offline
    private ChatClient client = null;
    
    public ClientForm() {
        initComponents();
        this.setTitle("Terminal Chat [client]");
        this.setLocationByPlatform(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txt_mo = new javax.swing.JTextArea();
        txt_in = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        txt_mo.setEditable(false);
        txt_mo.setColumns(20);
        txt_mo.setLineWrap(true);
        txt_mo.setRows(5);
        txt_mo.setText("Terminal Chat [Version 0.3b]");
        jScrollPane1.setViewportView(txt_mo);

        txt_in.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_inKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(txt_in))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
     
    }//GEN-LAST:event_formKeyTyped

    private void txt_inKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_inKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(!txt_in.getText().equals(""))this.println(txt_in.getText(),username);
            command(txt_in.getText());
            txt_in.setText("");
        }
    }//GEN-LAST:event_txt_inKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_in;
    private javax.swing.JTextArea txt_mo;
    // End of variables declaration//GEN-END:variables

    protected void print(String msg){
        txt_mo.append(msg);
    }
    protected void println(String msg,String user) {
        txt_mo.append("\n" + user + status + msg);
    }
    protected void println(String msg) {
        txt_mo.append("\n" + msg);
    }

    private void command(String txt) {
        String local,msg;
        if(txt.indexOf(" ") == -1){
            local = txt;
            msg = "";
        }
        else{
            local = txt.substring(0,txt.indexOf(" "));
            msg = txt.substring(txt.indexOf(" ") + 1);
            System.out.println("'" + local + "' '" +msg + "'");
        }
        //set mode and msg
        if(local.equalsIgnoreCase("help")){
            this.println("Try it first.");
        }
        else if(local.equalsIgnoreCase("connect")){
            String IP = msg.substring(0,msg.indexOf(" "));
            String port1 = msg.substring(msg.indexOf(" ") + 1,msg.length());
            System.out.println(IP + " " + port1);
            if(IP.length()!=0 && port1.length()!=0){
                client = new ChatClient(IP, Integer.parseInt(port1), this);
                this.status = "#";
            }
            else{
                this.println("Error wrong input parameter.");
            }
        }
        else if(local.equalsIgnoreCase("setname")){
            client.socketOut.println("SETUSERNAME\t" + msg);
            this.username = msg;
        }
        
        else if(status.indexOf("#")!= -1){
            if(local.equalsIgnoreCase("list")){
                client.socketOut.println("LISTGROUP");
            }
            else if(local.equalsIgnoreCase("chat")){
                client.socketOut.println("CHAT\t" + msg);
            }
            else if(local.equalsIgnoreCase("create")){
                client.socketOut.println("CREATE\t" + msg);
                client.socketOut.println("JOIN\t" + msg);
                client.socketOut.println("GETUNREAD");
                this.status = "(" + msg + ")#";
            }
            else if(local.equalsIgnoreCase("join")){
                client.socketOut.println("JOIN\t" + msg);
                this.status = "(" + msg + ")#";
            }
            else if(local.equalsIgnoreCase("end")){
                client.socketOut.println("LEAVE");
                this.status = "#";
            }
            else if(local.equalsIgnoreCase("mute")){
                client.socketOut.println("STOPMSG");
                this.status = "#";
            }
            else if(local.equalsIgnoreCase("getmsg")){
                client.socketOut.println("GETUNREAD");
                this.status = "(" + msg + ")#";
            }
            else if(local.equalsIgnoreCase("exit")){
                client.socketOut.println("BYE");
                this.status = ">";
                client.stop();
                client = null;
            }
            else this.println("'" + txt + "' is not recognized as an internal or external command.",username);
            return;
        }
        else this.println("'" + txt + "' is not recognized as an internal or external command.",username);
        
    }
}
